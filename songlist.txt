package main.java.com.molcon.service;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;

public class ReadAttendanceFiles {
public static void main(String[] args) {
	JSONArray jsonArray=getAttendanceDetails();
		saveAttendanceDetails(jsonArray);
		HashMap map=getStartAndEndDate(jsonArray);
		saveStartAndEndTime(map);
		/*Iterator iter = map.entrySet().iterator();
		while (iter.hasNext()) {
			Map.Entry entry = (Map.Entry) iter.next();
			System.out.println("[Key] : " + entry.getKey() + " [Value] : " + entry.getValue());
		}*/
}

private static void saveStartAndEndTime(HashMap map) {
	// TODO Auto-generated method stub
	 Connection con=null;
	 PreparedStatement preparedStatement=null;
	 String compiledQuery = "INSERT INTO attendance.employeeTime(emp_code, date, start_time, end_time)" +
            " VALUES" + "(?, ?, ?, ?)";	 	
	Iterator iter = map.entrySet().iterator();
	try {
		Class.forName("com.mysql.jdbc.Driver");
		con=DriverManager.getConnection("Jdbc:mysql://localhost:3306?user=root&password=dinga");
		preparedStatement = con.prepareStatement(compiledQuery);
	while (iter.hasNext()) {
		Map.Entry entry = (Map.Entry) iter.next();
	JSONObject jsonObject= (JSONObject) entry.getValue();	
	
		
		preparedStatement.setString(1,jsonObject.getString("empId"));
		String date= jsonObject.getString("date");
		Date dateOne=new SimpleDateFormat("yyyy-MM-dd").parse(date);
		java.sql.Date dateTwo=new java.sql.Date(dateOne.getTime());
		preparedStatement.setDate(2, dateTwo);
		preparedStatement.setString(3, jsonObject.getString("startTime"));
		preparedStatement.setString(4, jsonObject.getString("endTime"));
		preparedStatement.addBatch();
	}
	preparedStatement.executeBatch();
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	}

private static HashMap getStartAndEndDate(JSONArray jsonArray) {
	// TODO Auto-generated method stub
	HashMap map=new HashMap();
	SimpleDateFormat sdf=new SimpleDateFormat("HH:mm:ss");
	try {
	for(int i=0;i<jsonArray.length();i++)
	{
		JSONObject json=new JSONObject();
		JSONObject jsonObject=jsonArray.getJSONObject(i);
		String empId=jsonObject.getString("empId");
		String date=jsonObject.getString("date");
		String startTime=jsonObject.getString("time");
		String endTime=jsonObject.getString("time");
		if(map.containsKey(empId))
		{
			JSONObject object= (JSONObject) map.get(empId);
			String start=object.getString("startTime");
			String end=object.getString("endTime");
			Date startDateOne=sdf.parse(start);
			Date startDateTwo=sdf.parse(startTime);
			Date endDateOne=sdf.parse(end);
			Date endDateTwo=sdf.parse(endTime);
			if(startDateTwo.getTime()>startDateOne.getTime())
			{
				startTime=start;
			}
			if(endDateTwo.getTime()<endDateOne.getTime())
			{
				endTime=end;
			}			
			map.remove(empId);
			json.put("empId", empId);
			json.put("date", date);
			json.put("startTime", startTime);
			json.put("endTime", endTime);
			map.put(empId, json);
			
		}
		else
		{
			json.put("empId", empId);
			json.put("date", date);
			json.put("startTime", startTime);
			json.put("endTime", endTime);
			map.put(empId, json);			
		}
		
	}
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	return map;
}

private static void saveAttendanceDetails(JSONArray jsonArray) {
	// TODO Auto-generated method stub
	Connection con=null;
	 PreparedStatement preparedStatement=null;
	 String compiledQuery = "INSERT INTO attendance.employeedetails(emp_code, date, time, type)" +
             " VALUES" + "(?, ?, ?, ?)";	 	
	try {
		Class.forName("com.mysql.jdbc.Driver");
		con=DriverManager.getConnection("Jdbc:mysql://localhost:3306?user=root&password=dinga");
		preparedStatement = con.prepareStatement(compiledQuery);
		for(int i=0;i<jsonArray.length();i++)
		{
			JSONObject jsonObject=jsonArray.getJSONObject(i);
			preparedStatement.setString(1,jsonObject.getString("empId"));
			String date= jsonObject.getString("date");
			Date dateOne=new SimpleDateFormat("yyyy-MM-dd").parse(date);
			java.sql.Date dateTwo=new java.sql.Date(dateOne.getTime());
			preparedStatement.setDate(2, dateTwo);
			preparedStatement.setString(3, jsonObject.getString("time"));
			preparedStatement.setString(4, jsonObject.getString("type"));
			preparedStatement.addBatch();			
		}
		preparedStatement.executeBatch();
		 
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}	
}

private static JSONArray  getAttendanceDetails() {
	// TODO Auto-generated method stub
	FileInputStream fstream;
	 JSONArray jsonArray=new JSONArray();
	try {
		fstream = new FileInputStream("C:/Users/Chinni/Downloads/Attendance/11-05-2019.txt");
		 DataInputStream in = new DataInputStream(fstream);
		    BufferedReader br = new BufferedReader(new InputStreamReader(in));
		    String strLine;
		   
	          while ((strLine = br.readLine()) != null)   {
	        String[] tokens = strLine.split("	");
	        JSONObject jsonObject=new JSONObject();
	        jsonObject.put("empId", tokens[0]);
	        jsonObject.put("date", tokens[1]);
	        jsonObject.put("time", tokens[2]);
	        jsonObject.put("type", tokens[3]);
	        jsonArray.put(jsonObject); 	         
	          }
	        
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
   
	return jsonArray; 	
}
}
